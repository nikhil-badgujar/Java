

/*5) create abstract class Shape. declare "draw()" function as abstract.
 From this class define "Triangle","Polygon" and "Circle" .
create an array of Shape having 3 elements.
store child objects into this array . and call their draw function.*/

abstract class Shape
{
	 void draw() {}
}

class Triangle extends Shape
{
	void draw()
	{
			System.out.println("Trainle drawn")	;	
	}
}

class Polygon extends Shape
{
	void draw()
	{
			System.out.println("polygon drawn")	;	
	}
}

class Circle extends Shape
{
	void draw()
	{
			System.out.println("Circle drawn")	;	
	}
}

public class First 
{
	
	public static void main(String[] args)
	{
		Shape arr[] = new Shape[3];
		arr[0] = new Triangle();
		arr[1] = new Polygon();
		arr[2] = new Circle();

		for (int i=0;i<3;i++)
		{		arr[i].draw();
		}
	}
}

---------------------------------------------------------------------------------------------------------------------------------------


/*6) Define interface "A" with "disp1()" method.
Derive from "A", interface "B" with "disp2" method.
Derive class "C" , from "B".
Instantiate class "C" and call its members as well as derived from parent interfaces.*/

interface A
{
	 void disp1();
}

interface B extends A
{
	 void disp2();
}

class C implements B
{
	 public void disp1()
	{
		System.out.println("Implements disp1 from A");
	}
	  public void disp2()
	{
		System.out.println("Implements disp1 from B");
	}
}

public class First
{
	public static void main(String args[])
	{
		C obj = new C();
		obj.disp1();
		obj.disp2();
	}
}

-----------------------------------------------------------------------------------------------------------------------------------------

package pop;
/*7) Define class "Parent1" with some data.
Define interface "Parent2" with some data.
Derive a class "Child" from "Parent1" and "Parent2", instantiate it and call the members.*/

class Parent1
{
	void disp()
	{
		System.out.println("Into Parent1");
	}
}

interface Parent2
{
	void disp1();
}

class Child extends Parent1 implements Parent2
{
	public void disp()
	{
		System.out.println("Into Parent1 through Parent1");
	}
	public void disp1()
	{
		System.out.println("Into Child through Parent2");
	}
}

public class First
{
	public static void main(String args[])
	{
		Child c = new Child();
		c.disp();
		c.disp1();
	}
}

----------------------------------------------------------------------------------------------------------------------


8) Define a class "base1" with only parameterized constructor.
Derive a class "sub1" from "base1". This class should have following constructors
	a) Default
	b) one parameter
	c) two parameter
Now try to instantiate "sub1" , using any of the above mentioned constructors.
package Assignm2;


class Base1
{	int a;

	public Base1(int a)
	{
		this.a=a;
		System.out.println("parameterized constr of base1");
	}
}

class Sub1 extends Base1
{
	public Sub1()
	{
		super(10);
		System.out.println("default sub1");
	}

public Sub1(int b)
{
	super(20);
	System.out.println("one param sub1"+ b);
}
public Sub1(int c,int d)
{
	super(230);
	System.out.println("Two param sub1"+ c +"\t"+ d);
}
}

public class Demo1 {

	public static void main(String[] args)
	{
		Sub1 s = new Sub1();
		Sub1 s1 = new Sub1(200);	
		Sub1 s2 = new Sub1(10,20);
	}

}

------------------------------------------------------------------------------------------------------------------

package Assignm2;

/*9) create interface "Game" , have an abstract method "play()". from this interface implements
 *  classes like "Cricket" , "FootBall" and "Tennis".
Now Define one more class 
public class Demo with main function.
In this class have a static method "perform" which will take interface reference as
 parameter.inside "perform()" see to it that any child object passed ,its "play()" method should be invoked.
  Call "perform()" method from main function.



*/

interface Game
{
	abstract void play();
}

class Cricket implements Game
{
	public void play()
	{
		System.out.println("Playing Cricket");
	}
}

class Football implements Game
{
	public void play()
	{
		System.out.println("Playing Football");
	}
}

class Tennis implements Game
{
	public void play()
	{
		System.out.println("Playing Tennis");
	}
}


public class Demo1 {
	
	static void perform(Game ref)
	{
		ref.play();
	}

	public static void main(String[] args)
	{
		perform(new Cricket());
		perform(new Football());
		perform(new Tennis());

	}
}




